{"version":3,"names":[],"mappings":"","sources":["admin_browserify.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar _router = require('./router');\n\n$('.multiselect').multiselect({\n  nonSelectedText: 'Выберите значение'\n});\n\n},{\"./router\":4}],2:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar organizationCreate = exports.organizationCreate = {\n  /**\n   * Страница создания организации\n   */\n  index: function index() {\n    $('.duplicateForm').click(this._cloneFormField);\n    $('input[name=address]').on('change', this._onChangeAddress);\n  },\n\n  /**\n   * При изменении адреса парсим почтовый индекс и город\n   * @param e\n   * @private\n   */\n  _onChangeAddress: function _onChangeAddress(e) {\n    var $address = $(e.currentTarget);\n    //  если есть почтовый индекс в адресе вставляем его в соответствующее поле\n    var matches = /^(\\d+)/.exec($address.val());\n    if (matches) $('input[name=postCode]').val(matches[1]);\n\n    // ищем город и выбираем его в выпадающем списке\n    matches = /(?:місто|м\\.)\\s+([а-яїґ]+)/i.exec($address.val());\n    if (matches) {\n      var $select = $('select[name=city]');\n      var $option = $select.find('option').filter(function (key, option) {\n        return $(option).text().toLowerCase() == matches[1].toLowerCase();\n      });\n      $option.attr('selected', 'true');\n      $select.multiselect('refresh');\n    }\n  },\n\n  /**\n   * Дублирование поля ввода\n   * @param e\n   * @private\n   */\n  _cloneFormField: function _cloneFormField(e) {\n    var $parent = $(e.target.parentNode);\n    $parent.prepend($parent.find('input:first').clone().val(''));\n  }\n};\n\n},{}],3:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar organizationWorkers = exports.organizationWorkers = {\n  CHECK_SYMBOLS: /[^АБВГҐДЕЄЖЗИІЇЙКЛМНОПРСТУФХЦЧШЩЬЮЯабвгґдеєжзиіїйклмнопрстуфхцчшщьюя№ \"'(),-=.\\/0123456789;:I]/,\n  CHECK_LETTERS: /[АБВГҐДЕЄЖЗИІЇЙКЛМНОПРСТУФХЦЧШЩЬЮЯабвгґдеєжзиіїйклмнопрстуфхцчшщьюя]{2,}/,\n\n  /**\n   * Страница импорта файла работников\n   */\n  index: function index() {\n    $('input[name=file]').on('change', this._onSelectFile.bind(this));\n  },\n\n  /**\n   * Пользователь выбрал файл\n   * @param e\n   * @private\n   */\n  _onSelectFile: function _onSelectFile(e) {\n    var file = e.target.files[0];\n    if (!file) return;\n\n    var fileReader = new FileReader();\n    fileReader.onload = this._checkFile.bind(this);\n    fileReader.readAsText(file, 'cp1251');\n  },\n\n  /**\n   * И тут начинается пиздорез с проверкой\n   * @param e\n   * @private\n   */\n  _checkFile: function _checkFile(e) {\n    var lines = e.target.result.split(\"\\n\");\n    var errors = [],\n        warnings = [];\n\n    errors = errors.concat(this._checkFirstLine(lines[0]));\n\n    // получаем сотрудников\n    var workers = { main: [] },\n        currentCategory = null,\n        matches = undefined;\n\n    for (var i = 1; i < lines.length; i++) {\n      var line = lines[i].trim();\n      // проверяем на неразрещенные символы\n      matches = this.CHECK_SYMBOLS.exec(line);\n      if (matches) {\n        errors.push('Неразрещенный символ. line: ' + (i + 1) + ', symbol: ' + matches.index);\n      }\n\n      // =категория\n      matches = /^=([^=]+)$/.exec(line);\n      if (matches) {\n        if (currentCategory) errors.push('Открытие категории, но предыдущая еще не закрылась. line: ' + (i + 1));\n        currentCategory = matches[1];\n        continue;\n      }\n\n      // закрытие категории \"==\"\n      if (/^\\s*==\\s*$/.test(line)) {\n        if (!currentCategory) errors.push('Закрытие категории, но открытия не было. line: ' + (i + 1));\n        currentCategory = null;\n        continue;\n      }\n\n      // парсим работников\n      var cat = currentCategory ? currentCategory : 'main';\n      if (!workers[cat]) workers[cat] = [];\n\n      this._parseWorker(line, {\n        workers: workers[cat],\n        errors: errors,\n        line: i + 1\n      });\n    }\n\n    if (currentCategory) errors.push('Неверно открыты/закрыты категории. \"' + currentCategory + '\"');\n\n    // проверяем работников по БД\n    this._checkWorkers(workers, { errors: errors }).then(function (fioErrors) {\n      warnings = warnings.concat(fioErrors);\n      this._showErrors({\n        errors: errors,\n        selector: '.errors'\n      });\n      this._showErrors({\n        errors: warnings,\n        selector: '.warnings',\n        className: 'alert-warning'\n      });\n    }.bind(this));\n  },\n\n  /**\n   *\n   * @param value\n   * @returns {Array}\n   * @private\n   */\n  _checkFirstLine: function _checkFirstLine(value) {\n    var data = value.split(','),\n        date = data[0].trim(),\n        workersCount = data[1].trim(),\n        errors = [];\n\n    // проверяем дату\n    if (!/^\\d{2}\\.\\d{2}\\.\\d{4}$/.test(date)) errors.push('Неверный формат даты \"' + date + '\" (должен быть <11.11.2222>)');\n\n    // кол-во сотрудников\n    if (!/^(\\d+|-)$/.test(workersCount)) errors.push('Кол-во сотрудников указано неверно \"' + workersCount + '\" (должно быть число либо <->)');\n\n    return errors;\n  },\n\n  /**\n   *\n   * @param value\n   * @param opt\n   * @private\n   */\n  _parseWorker: function _parseWorker(value, opt) {\n    var matches = /([^,]+),(.*)$/.exec(value);\n    if (!matches) {\n      opt.errors.push('Невозможно распознать ФИО и должность. line: ' + opt.line);\n      return;\n    }\n\n    var position = matches[2].trim();\n    if (!this.CHECK_LETTERS.test(position)) {\n      opt.errors.push('Невозможно распознать ФИО и должность. line: ' + opt.line);\n      return;\n    }\n\n    opt.workers.push({ fio: matches[1].trim(), position: position });\n  },\n\n  _checkWorkers: function _checkWorkers(workers) {\n    // отправляем на сервер только массив ФИО\n    var data = [];\n    for (var i in workers) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = workers[i][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var worker = _step.value;\n\n          data.push(worker.fio);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }return $.ajax({\n      url: '/admin/workers/check_new_workers',\n      method: 'post',\n      data: {\n        workers: JSON.stringify(data),\n        _token: window._token\n      }\n    });\n  },\n\n  /**\n   * Выводим ошибки проверки файла\n   * @param {{errors: <Array>, selector: <String>, className: <String>}} opt\n  * @private\n   */\n  _showErrors: function _showErrors(opt) {\n    opt = _.extend({ className: 'alert-danger' }, opt);\n    var html = '';\n    if (opt.errors && opt.errors.length > 0) html = '<div class=\"alert ' + opt.className + '\">' + opt.errors.join('<br>') + '</div>';\n    $(opt.selector).html(html);\n  }\n};\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.router = undefined;\n\nvar _organization_create = require('./controllers/organization_create');\n\nvar _organization_workers = require('./controllers/organization_workers');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Router =\n/**\n * Прогоняем роутфы и выполняем первый подходящий\n * @param url\n */\nfunction Router() {\n  var url = arguments.length <= 0 || arguments[0] === undefined ? window.location.pathname : arguments[0];\n\n  _classCallCheck(this, Router);\n\n  // роуты добавлять здесь\n  var rules = [[_organization_create.organizationCreate.index.bind(_organization_create.organizationCreate), /admin\\/organization\\/(create|\\d+\\/edit)$/], [_organization_workers.organizationWorkers.index.bind(_organization_workers.organizationWorkers), /admin\\/organization\\/\\d+\\/workers$/]];\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = rules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var rule = _step.value;\n\n      if (rule[1].test(url)) {\n        if (typeof rule[0] != 'function') throw new Error('invalid route method \\'' + rule[1] + '\\'');\n        rule[0]();\n        break;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n};\n\nvar router = exports.router = new Router();\n\n},{\"./controllers/organization_create\":2,\"./controllers/organization_workers\":3}]},{},[1]);\n"],"file":"admin_browserify.js","sourceRoot":"/source/"}